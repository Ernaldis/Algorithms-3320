Question:
Assume that every possible way of evaluating a sequence of n such matrices (every possible way of placing parentheses) is equally likely. Design an algorithm that determines the average amount of work (in terms of scalar multiplications) for a given sequence of n matrices. precisely define what is "average work"! Determine its time and space complexity.

Definition of Average Work:
The work involved in a chain of matrix multiplications is normally measured in scalar multiplications required. The average work, given each possible ordering is equally likely, is defined as the average of the number of scalar multiplications each unique ordering requires.

Solution:
The average amount of work can be determined for a given sequence of n matrices is by is the Memorized-Matrix-Chain algorithm.

    This will maintain a table of m[1..n, 1..n]containing the values computed by the m[i, j].

    The values present in m[i, j] are minimum number of scalar multiplications that are required to compute the matrix Ai..j.

    In the beginning the table contains an infinity value, this means, entries are yet to be filled.

    This algorithm uses another sub algorithm to compute the cost of the m[i, j], that is LOOKUP-CHAIN algorithm.

    LOOKUP-CHAIN algorithm contains condition at the first line to check whether the value of m[i, j] is less than infinity then it simply returns the previously computed cost of m[i, j].

        If not, it computes the cost of m[i, j] and returns the value.

Thus, the algorithm is given as,

Memorized-Matrix-Chain(p)

            n = length[p]-1

            for i = 1 to n

                        do for j = i to n

                                    m[i, j] = infinity

            return LOOKUP_CHAIN(p, 1, n)

LOOKUP_CHAIN(p, i, j)

            if m[i, j] < infinity

                        return m[i, j]

            if i == j

                        m[i, j] = 0

            else

                        for k = i to j-1

                                    q = LOOKUP_CHAIN(p, i, k) + LOOKUP_CHAIN(p, k+1, j) + pi -pkpj

                                    if q < m[i, j]

                                                m[i, j] = q

            return m[i, j]

The average-work here represents the optimal cost of the algorithm.

The Memorized-Matrix-Chain algorithm is executed at O(n3) time.

For each O(n^2) the LOOKUP_CHAIN takes O(n) time.

Thus, it takes O(n3) time to calculate the table entries.


source (https://www.chegg.com/homework-help/questions-and-answers/assume-every-possible-way-evaluating-sequence-n-matrices-every-possible-way-placing-parent-q9078643)
